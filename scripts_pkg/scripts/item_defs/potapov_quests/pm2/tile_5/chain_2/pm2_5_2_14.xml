<pm2_5_2_14.xml>
   <quests>
      <potapovQuest>
         <enabled> true </enabled>
         <id>pm2_5_2_14_main</id>
         <serverOnly> true </serverOnly>
         <conditions></conditions>
         <scripts>
pass
         </scripts>
         <bonus>
            <credits>50000</credits>
            <freeXP>750</freeXP>
            <token>
               <id>token:pt:final:s2:t5:main</id>
               <expires>28.01.2100 00:01</expires>
               <count>1</count>
               <limit>75</limit>
            </token>
         </bonus>
      </potapovQuest>
      <potapovQuest>
         <enabled> true </enabled>
         <id>pm2_5_2_14_main_award_list</id>
         <serverOnly> true </serverOnly>
         <conditions>
            <preBattle>
               <account>
                  <token>
                     <id>pm2_5_2_14_main_award_list</id>
                     <equal>1</equal>
                  </token>
               </account>
            </preBattle>
         </conditions>
         <bonus>
            <credits>50000</credits>
            <freeXP>750</freeXP>
            <token>
               <id>token:pt:final:s2:t5:main</id>
               <expires>28.01.2100 00:01</expires>
               <count>1</count>
               <limit>75</limit>
            </token>
         </bonus>
      </potapovQuest>
      <potapovQuest>
         <enabled> true </enabled>
         <id>pm2_5_2_14_add</id>
         <serverOnly> true </serverOnly>
         <conditions>
            <postBattle>
               <results>
                  <key>damageBlockedByArmor</key>
                  <max>1</max>
               </results>
            </postBattle>
         </conditions>
         <scripts>
LOG = globals().get(&#39;LOG&#39;)
&#34;&#34;&#34;:type: typing.LOG_DEBUG_DEV&#34;&#34;&#34;

QUEST_EVENT_TYPE = globals().get(&#39;QUEST_EVENT_TYPE&#39;)
&#34;&#34;&#34;:type: quest_definitions.QUEST_EVENT_TYPE&#34;&#34;&#34;

quest_progress = globals().get(&#39;quest_progress&#39;)
&#34;&#34;&#34;:type: quest_progress&#34;&#34;&#34;

server_constants = globals().get(&#39;server_constants&#39;)
&#34;&#34;&#34;:type: server_constants&#34;&#34;&#34;

items = globals().get(&#39;items&#39;)
&#34;&#34;&#34;:type: items&#34;&#34;&#34;

ATTACK_REASON = globals().get(&#39;ATTACK_REASON&#39;)
&#34;&#34;&#34;:type: constants.ATTACK_REASON&#34;&#34;&#34;

filters = globals().get(&#39;filters&#39;)
&#34;&#34;&#34;:type: battle_result_event_list_helpers&#34;&#34;&#34;


TOP_BY_BLOCKED_DAMAGE = &#39;topByBlockedDamage&#39;
TOP_BY_BLOCKED_DAMAGE_SERIES = &#39;topByBlockedDamageSeries&#39;
BLOCKED_DAMAGE_IN_BATTLE = &#39;blockedDamageInBattle&#39;
BLOCKED_DAMAGE_IN_BATTLE_SERIES = &#39;blockedDamageInBattleSeries&#39;

def onFinishBattle(eventType, eventData, quest, processor):
    questProgress = quest_progress.BaseQuestProgress(quest.config, processor.getQuestProgress(quest.progressID))

    avatarResults = eventData[&#39;avatarResults&#39;]

    blockedDamagePosition = avatarResults[&#39;misc&#39;][&#39;max&#39;][&#39;damageBlockedByArmor&#39;]

    if blockedDamagePosition &lt;= questProgress.getProgress(TOP_BY_BLOCKED_DAMAGE).getParam(&#39;desiredPosition&#39;):
        questProgress.setCompleted(TOP_BY_BLOCKED_DAMAGE)
        questProgress.increaseUntilComplete(TOP_BY_BLOCKED_DAMAGE_SERIES, 1)

    ownVehCD = next(iter(eventData[&#39;vehCompDescrs&#39;]))
    accDBID = avatarResults[&#39;accountDBID&#39;]
    ownVehicleHP = items.vehicles.VehicleDescr(
        eventData[&#39;vehPublicResults&#39;][&#39;accountCompDescr&#39;][accDBID][0][1]).maxHealth
    questProgress.getProgress(BLOCKED_DAMAGE_IN_BATTLE).setGoal(ownVehicleHP*2)

    blockedDamage = avatarResults[&#39;damageBlockedByArmor&#39;]

    if questProgress.increaseUntilComplete(BLOCKED_DAMAGE_IN_BATTLE, blockedDamage):
        questProgress.increaseUntilComplete(BLOCKED_DAMAGE_IN_BATTLE_SERIES, 1)

    eventData[&#39;results&#39;].update(processor.checkComplete(questProgress, quest.progressID, additionalProgressID=TOP_BY_BLOCKED_DAMAGE_SERIES))

    processor.setQuestProgress(quest.progressID, questProgress.save())


def onInit(eventType, eventData, quest, processor):
    for event in events.iterkeys():
        processor.subscribe(event, quest)
    return True


events = {
    QUEST_EVENT_TYPE.INIT: onInit,
    QUEST_EVENT_TYPE.FINISH_BATTLE: onFinishBattle,
}


def quest(eventType, eventData, quest, processor):
    LOG(&#39;QUEST EVENT:&#39;, eventType, quest.id)
    return events.get(eventType, lambda *args: False)(eventType, eventData, quest, processor)
         </scripts>
         <bonus>
            <freeXP>750</freeXP>
            <token>
               <id>token:pt:final:s2:t5:add</id>
               <expires>28.01.2100 00:01</expires>
               <count>1</count>
               <limit>75</limit>
            </token>
         </bonus>
      </potapovQuest>
      <potapovQuest>
         <enabled> true </enabled>
         <id>pm2_5_2_14_add_award_list</id>
         <serverOnly> true </serverOnly>
         <conditions>
            <preBattle>
               <account>
                  <token>
                     <id>pm2_5_2_14_main_award_list</id>
                     <greaterOrEqual>1</greaterOrEqual>
                     <consume>
                        100
                        <force></force>
                     </consume>
                  </token>
               </account>
            </preBattle>
            <postBattle>
               <and>
                  <results>
                     <key>addQuestCompleted</key>
                     <greaterOrEqual>1</greaterOrEqual>
                  </results>
               </and>
            </postBattle>
         </conditions>
         <bonus>
            <token>
               <id>free_award_list_2</id>
               <expires>28.01.2100 00:01</expires>
               <count>1</count>
            </token>
         </bonus>
      </potapovQuest>
   </quests>
</pm2_5_2_14.xml>
